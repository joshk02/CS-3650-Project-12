// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int currentLength, maxLength;
    field boolean isNegative;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength = 0) {
        let maxLength = 1;
      }

      let buffer = Array.new(maxLength);
      let currentLength = 0;
      let maxLength = maxLength;

      return this; 
    }

    /** Disposes this string. */
    method void dispose() {
      do Array.dispose(buffer);

      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j > maxLength) | (j = maxLength)) {
        return;
      }

      let buffer[j] = c;

      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let buffer[currentLength] = c;
      let currentLength = currentLength + 1;

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (currentLength = 0) {
        return;
      }

      let buffer[currentLength] = null;
      let currentLength = currentLength - 1;

      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int res, i, digitIntValue;
      var boolean neg;

      let res = 0;
      let i = 0;

      if (buffer[i] = 45) {
        let neg = true;
        let i = 1;
      }

      while (i < currentLength) {
        let digitIntValue = buffer[i] - 48; // 0 in ascii
        let res = res * 10 + digitIntValue;
        let i = i + 1;
      }

      if (neg) {
        return -res;
      } else {
        return res;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lastDigit, c;

      if (val < 0) {
        let val = -val;
        let isNegative = true;
      }

      let lastDigit = val - (val / 10 * 10);
      let c = 48 + lastDigit;

      if (val < 10) { 
        let currentLength = 0;
        if (isNegative) {
          do appendChar(45);
        }
        do appendChar(c);
      } else {
        do setInt(val / 10);
        do appendChar(c);
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
